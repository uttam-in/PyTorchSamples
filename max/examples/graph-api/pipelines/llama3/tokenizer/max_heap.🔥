# ===----------------------------------------------------------------------=== #
# Copyright (c) 2024, Modular Inc. All rights reserved.
#
# Licensed under the Apache License v2.0 with LLVM Exceptions:
# https://llvm.org/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ===----------------------------------------------------------------------=== #
"""A simple generic max-heap implementation."""

from collections import List


trait Ordered:
    """Types which have a total order defined on them."""

    fn __lt__(self, other: Self) -> Bool:
        pass


trait OrderedElement(Ordered, RepresentableCollectionElement):
    """Orderable types which are also CollectionElements."""

    pass


alias MinHeap = MaxHeap[reverse=True]


struct MaxHeap[ElementType: OrderedElement, reverse: Bool = False](
    Sized, Boolable
):
    """A max-heap of an Orderable collection type.

    A MaxHeap is a convenient data structure for implementing a priority queue.

    Usage:
    ```mojo
    pq = MaxHeap[...]()
    pq.push(initial)
    while pq:
        top = pq.pop()
        if something: pq.push(another)
    ```
    """

    var heap: List[ElementType]

    fn __init__(inout self):
        """Constructs an empty heap."""
        self.heap = List[ElementType]()

    fn __len__(self) -> Int:
        """Checks how many elements are in the heap.."""
        return len(self.heap)

    fn __bool__(self) -> Bool:
        """Checks whether the heap has any elements in it."""
        return len(self) != 0

    fn push(inout self, owned elem: ElementType):
        """Adds a value to the heap."""
        self.heap.append(elem^)
        self._bubble_up(len(self.heap) - 1)

    fn pop(inout self) -> ElementType:
        """Removes the top element from the heap and return it."""
        debug_assert(self, "heap is empty")

        self.heap[-1], self.heap[0] = self.heap[0], self.heap[-1]
        var top = self.heap.pop()
        self._sink_down(0)
        return top^

    fn _bubble_up(inout self, idx: Int):
        if idx == 0:
            return

        var parent_idx = _parent_idx(idx)
        if self._less_than(parent_idx, idx):
            # TODO(untracked): Add List.swap_indices and switch to that.
            self.heap[parent_idx], self.heap[idx] = (
                self.heap[idx],
                self.heap[parent_idx],
            )
            self._bubble_up(parent_idx)

    fn _sink_down(inout self, idx: Int):
        var li = _left_child_idx(idx)
        var ri = _right_child_idx(idx)

        var target_idx = idx  # greater of the two children, if we should sink down
        if li < len(self.heap) and self._less_than(target_idx, li):
            target_idx = li
        if ri < len(self.heap) and self._less_than(target_idx, ri):
            target_idx = ri

        if target_idx != idx:
            # TODO(untracked): Add List.swap_indices and switch to that.
            self.heap[idx], self.heap[target_idx] = (
                self.heap[target_idx],
                self.heap[idx],
            )
            self._sink_down(target_idx)

    @always_inline
    fn _less_than(self, i1: Int, i2: Int) -> Bool:
        var lt = self.heap[i1] < self.heap[i2]

        @parameter
        if Self.reverse:
            return not lt
        else:
            return lt


@always_inline
fn _parent_idx(idx: Int) -> Int:
    return (idx - 1) // 2


@always_inline
fn _left_child_idx(idx: Int) -> Int:
    return idx * 2 + 1


@always_inline
fn _right_child_idx(idx: Int) -> Int:
    return idx * 2 + 2
